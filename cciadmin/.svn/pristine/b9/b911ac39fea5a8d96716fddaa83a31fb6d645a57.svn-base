package com.cci.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.struts2.ServletActionContext;

import com.cci.dao.OperatorDao;
import com.cci.pojo.Operator;
import com.cci.pojo.PageSize;

public class OperatorAction extends BaseAction {

	private Operator operator;
	private OperatorDao operatorDao;
	private String functionName;

	private int pageSize = PageSize.pageSize;
	private int currentPage = 1;
	private int totalPage;
	private int totalElements;

	private List list;

	public String execute() throws Exception {

		HttpServletRequest request = ServletActionContext.getRequest();
		HttpSession session = request.getSession();
		Object userObject = session.getAttribute("sysmUser");

		if (userObject == null) {
			return this.ERROR;
		}

		if (functionName != null && functionName.equals("view")) {

			operator = operatorDao.queryOperatorById(operator.getOperator_id());

			return "view";

		}

		if (functionName != null && functionName.equals("update_view")) {
			operator = operatorDao.queryOperatorById(operator.getOperator_id());
			return "update_view";
		}

		if (functionName != null && functionName.equals("update")) {

			operator.setDel_flag(0);
			operatorDao.updateOperator(operator);

			return "operationSuc";
		}

		if (functionName != null && functionName.equals("delOperator")) {
			operatorDao.delOperator(operator.getOperator_id());
			return "operationSuc";
		}

		if (functionName != null && functionName.equals("preSave")) {
			return "preSave";
		}

		if (functionName != null && functionName.equals("save")) {

			int num = operatorDao.queryOperatorByOperatorCode(operator
					.getOperator_code());

			if (num != 0) {
				this.addFieldError("operator", operator.getOperator_code()
						+ ":账号已经存在了!!!");
				return this.INPUT;
			}

			operator.setDel_flag(0);
			operatorDao.insertOperator(operator);

			return "operationSuc";

		}

		if (functionName != null && functionName.equals("query")) {

			if (this.operator == null) {
				this.operator = new Operator();
			}

			String queryStr = "1=1";
			StringBuilder stb = new StringBuilder(queryStr);

			if (!(operator.getOperator_code() == null || operator
					.getOperator_code().trim().equals(""))) {
				stb.append(" and operator_code  like  '%"
						+ operator.getOperator_code().trim() + "%'");
			}

			list = operatorDao.selectOperator(pageSize, currentPage, stb
					.toString());
			this.currentPage = operatorDao.getCurrentPage();
			this.totalElements = operatorDao.getTotalElements();
			this.totalPage = operatorDao.getTotalPage();

			return "query";

		}

		return super.execute();
	}

	public Operator getOperator() {
		return operator;
	}

	public void setOperator(Operator operator) {
		this.operator = operator;
	}

	public OperatorDao getOperatorDao() {
		return operatorDao;
	}

	public void setOperatorDao(OperatorDao operatorDao) {
		this.operatorDao = operatorDao;
	}

	public String getFunctionName() {
		return functionName;
	}

	public void setFunctionName(String functionName) {
		this.functionName = functionName;
	}

	public int getPageSize() {
		return pageSize;
	}

	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}

	public int getCurrentPage() {
		return currentPage;
	}

	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
	}

	public int getTotalPage() {
		return totalPage;
	}

	public void setTotalPage(int totalPage) {
		this.totalPage = totalPage;
	}

	public int getTotalElements() {
		return totalElements;
	}

	public void setTotalElements(int totalElements) {
		this.totalElements = totalElements;
	}

	public List getList() {
		return list;
	}

	public void setList(List list) {
		this.list = list;
	}

}
